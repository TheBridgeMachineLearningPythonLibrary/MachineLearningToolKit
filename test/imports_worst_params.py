from numpy import array
from numpy.ma import masked_array
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from mltoolkit.data_processing import buffdescribe
from mltoolkit.data_analysis import *
from mltoolkit.machine_learning import *
from mltoolkit.plot import *

clf_cv_results = {'mean_fit_time': array([0.01718318, 0.0028271 , 0.38156233, 0.33234448, 0.35453713,
        0.00439863, 0.00284553, 0.00274587, 0.00266459, 0.00200651,
        0.00236692, 0.00278957]),
 'std_fit_time': array([0.00516329, 0.00163186, 0.09469229, 0.07785508, 0.06154388,
        0.00176376, 0.00057058, 0.00091433, 0.00144808, 0.00063374,
        0.00082487, 0.00075851]),
 'mean_score_time': array([0.0018924 , 0.00069876, 0.03394792, 0.03130136, 0.03214581,
        0.00179503, 0.00121999, 0.000912  , 0.00106797, 0.00100076,
        0.00091968, 0.00097802]),
 'std_score_time': array([0.00290424, 0.00045828, 0.01646534, 0.01045479, 0.00829282,
        0.00059888, 0.00042194, 0.00030658, 0.00033866, 0.00044725,
        0.00073592, 0.0003762 ]),
 'param_classifier': masked_array(data=[LogisticRegression(max_iter=1000, solver='liblinear'),
                    LogisticRegression(max_iter=1000, solver='liblinear'),
                    RandomForestClassifier(), RandomForestClassifier(),
                    RandomForestClassifier(), SVC(), SVC(), SVC(), SVC(),
                    SVC(), SVC(), SVC()],
              mask=[False, False, False, False, False, False, False, False,
                    False, False, False, False],
        fill_value='?',
             dtype=object),
 'param_classifier__penalty': masked_array(data=['l1', 'l2', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'],
              mask=[False, False,  True,  True,  True,  True,  True,  True,
                     True,  True,  True,  True],
        fill_value='?',
             dtype=object),
 'param_classifier__max_features': masked_array(data=['--', '--', 1, 2, 3, '--', '--', '--', '--', '--', '--', '--'],
              mask=[ True,  True, False, False, False,  True,  True,  True,
                     True,  True,  True,  True],
        fill_value='?',
             dtype=object),
 'param_classifier__C': masked_array(data=['--', '--', '--', '--', '--', 0.001, 0.1, 0.5, 1, 5, 10, 100],
              mask=[ True,  True,  True,  True,  True, False, False, False,
                    False, False, False, False],
        fill_value='?',
             dtype=object),
 'params': [{'classifier': LogisticRegression(max_iter=1000, solver='liblinear'),
   'classifier__penalty': 'l1'},
  {'classifier': LogisticRegression(max_iter=1000, solver='liblinear'),
   'classifier__penalty': 'l2'},
  {'classifier': RandomForestClassifier(), 'classifier__max_features': 1},
  {'classifier': RandomForestClassifier(), 'classifier__max_features': 2},
  {'classifier': RandomForestClassifier(), 'classifier__max_features': 3},
  {'classifier': SVC(), 'classifier__C': 0.001},
  {'classifier': SVC(), 'classifier__C': 0.1},
  {'classifier': SVC(), 'classifier__C': 0.5},
  {'classifier': SVC(), 'classifier__C': 1},
  {'classifier': SVC(), 'classifier__C': 5},
  {'classifier': SVC(), 'classifier__C': 10},
  {'classifier': SVC(), 'classifier__C': 100}],
 'split0_test_score': array([0.91666667, 0.91666667, 1.        , 1.        , 1.        ,
        0.33333333, 0.91666667, 0.91666667, 1.        , 1.        ,
        1.        , 1.        ]),
 'split1_test_score': array([0.91666667, 1.        , 0.83333333, 0.83333333, 0.83333333,
        0.33333333, 0.91666667, 0.91666667, 0.91666667, 0.91666667,
        0.91666667, 1.        ]),
 'split2_test_score': array([1.        , 1.        , 0.91666667, 0.91666667, 0.91666667,
        0.58333333, 0.91666667, 0.91666667, 1.        , 1.        ,
        1.        , 1.        ]),
 'split3_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
        0.58333333, 0.91666667, 1.        , 1.        , 1.        ,
        1.        , 1.        ]),
 'split4_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
        0.66666667, 1.        , 1.        , 1.        , 1.        ,
        1.        , 1.        ]),
 'split5_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
        0.66666667, 1.        , 1.        , 1.        , 1.        ,
        1.        , 1.        ]),
 'split6_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
        0.41666667, 0.75      , 0.91666667, 1.        , 1.        ,
        1.        , 1.        ]),
 'split7_test_score': array([0.66666667, 0.75      , 0.83333333, 0.83333333, 0.83333333,
        0.58333333, 0.91666667, 0.83333333, 0.83333333, 0.83333333,
        0.83333333, 0.83333333]),
 'split8_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
        0.33333333, 1.        , 1.        , 1.        , 1.        ,
        1.        , 0.91666667]),
 'split9_test_score': array([1.        , 1.        , 0.91666667, 1.        , 1.        ,
        0.33333333, 1.        , 1.        , 0.91666667, 0.91666667,
        0.91666667, 0.91666667]),
 'mean_test_score': array([0.95      , 0.96666667, 0.95      , 0.95833333, 0.95833333,
        0.48333333, 0.93333333, 0.95      , 0.96666667, 0.96666667,
        0.96666667, 0.96666667]),
 'std_test_score': array([0.1       , 0.07637626, 0.06666667, 0.06718548, 0.06718548,
        0.13844373, 0.07264832, 0.05527708, 0.05527708, 0.05527708,
        0.05527708, 0.05527708]),
 'rank_test_score': array([ 8,  1,  8,  6,  6, 12, 11,  8,  1,  1,  1,  1])}


df = {'rank_test_score': array([0,2,3,4,6,5,2]),
    'mean_test_score': array([0.2, 0.13, 0.9, 0.60, 0.50, 0.2, 0.03]),    
    'params': [{'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'},
    {'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'},
    {'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'},
    {'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'},
    {'C': 5, 'degree': 3, 'gamma': 'auto', 'kernel': 's'},
    {'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'},
    {'C': 100, 'degree': 1, 'gamma': 'scale', 'kernel': 'sigmoid'}]}